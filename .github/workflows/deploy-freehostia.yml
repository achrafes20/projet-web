name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: gym_management
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost -u root -psecret" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Start Docker Compose
      run: docker compose up -d --build

    - name: Wait for services to be ready
      run: |
        docker compose exec -T db mysqladmin ping -h localhost -u root -psecret --wait
        sleep 10

    - name: Install Composer dependencies
      run: docker compose exec -T app composer install

    - name: Generate Laravel application key
      run: docker compose exec -T app php artisan key:generate

    - name: Set storage permissions
      run: |
        docker compose exec -T app chmod -R 775 storage
        docker compose exec -T app chown -R www-data:www-data storage

    - name: Run Laravel migrations
      run: docker compose exec -T app php artisan migrate --force

    - name: Run PHPUnit tests
      run: docker compose exec -T app vendor/bin/phpunit

    - name: Verify services
      run: |
        docker compose ps | grep app | grep Up
        docker compose ps | grep webserver | grep Up
        docker compose ps | grep db | grep Up
        docker compose ps | grep phpmyadmin | grep Up

    - name: Check application health
      run: |
        curl -sSf http://localhost:8080 > /dev/null || (echo "Backend health check failed" && exit 1)
        curl -sSf http://localhost:8081 > /dev/null || (echo "PHPMyAdmin health check failed" && exit 1)

    - name: Clean up
      if: always()
      run: docker compose down -v

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, ctype, fileinfo, tokenizer, pdo_mysql
        tools: composer

    - name: Install dependencies
      run: |
        cd backend
        composer install --no-dev --optimize-autoloader
        php artisan config:clear

    - name: Prepare .env for production
      run: |
        cd backend
        echo "APP_ENV=production" > .env
        echo "APP_DEBUG=false" >> .env
        echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
        echo "DB_HOST=${{ secrets.FREEHOSTIA_DB_HOST }}" >> .env
        echo "DB_DATABASE=${{ secrets.FREEHOSTIA_DB_NAME }}" >> .env
        echo "DB_USERNAME=${{ secrets.FREEHOSTIA_DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.FREEHOSTIA_DB_PASSWORD }}" >> .env
        # Ajoutez ici les autres variables n√©cessaires

    - name: Upload via FTP
      uses: SamKirkland/FTP-Deploy-Action@4.3.0
      with:
        server: ${{ secrets.FREEHOSTIA_FTP_SERVER }}
        username: ${{ secrets.FREEHOSTIA_FTP_USER }}
        password: ${{ secrets.FREEHOSTIA_FTP_PASSWORD }}
        local-dir: ./backend/
        server-dir: ./htdocs/  # Dossier racine Freehostia
        exclude: |
          .git*
          .env.example
          docker-compose.yml
          tests/
          storage/logs/*
