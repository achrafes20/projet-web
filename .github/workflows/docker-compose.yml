name: Docker Compose Build, Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Free up port 3306
      run: |
        sudo lsof -ti :3306 | xargs -r sudo kill -9 || true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Start Docker Compose
      run: docker compose up -d --build

    - name: Wait for services
      run: |
        docker compose exec -T db mysqladmin ping -h localhost -u root -psecret --wait
        sleep 10

    - name: Run Laravel migrations
      run: docker compose exec -T backend php artisan migrate --force

    - name: Verify services
      id: verify-services
      run: |
        docker compose ps | grep backend | grep Up || exit 1
        docker compose ps | grep frontend | grep Up || exit 1
        docker compose ps | grep db | grep Up || exit 1
        echo "services_ready=true" >> $GITHUB_OUTPUT

    - name: Check for Dockerfile changes
      id: dockerfile-changes
      run: |
        changed_files=$(git diff --name-only HEAD^ HEAD || echo "")
        echo "backend_changed=false" >> $GITHUB_OUTPUT
        echo "frontend_changed=false" >> $GITHUB_OUTPUT
        [[ "$changed_files" =~ "backend/Dockerfile" ]] && echo "backend_changed=true" >> $GITHUB_OUTPUT
        [[ "$changed_files" =~ "frontend/Dockerfile" ]] && echo "frontend_changed=true" >> $GITHUB_OUTPUT

    - name: Push Backend Image
      if: |
        github.event_name == 'push' &&
        steps.verify-services.outputs.services_ready == 'true' &&
        steps.dockerfile-changes.outputs.backend_changed == 'true'
      run: |
        docker tag $(docker compose images -q backend) ${{ secrets.DOCKER_HUB_USERNAME }}/gym-backend:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gym-backend:latest

    - name: Push Frontend Image
      if: |
        github.event_name == 'push' &&
        steps.verify-services.outputs.services_ready == 'true' &&
        steps.dockerfile-changes.outputs.frontend_changed == 'true'
      run: |
        docker tag $(docker compose images -q frontend) ${{ secrets.DOCKER_HUB_USERNAME }}/gym-frontend:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gym-frontend:latest

    - name: Clean up
      if: always()
      run: docker compose down -v

  deploy:
    needs: build-test-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, ctype, fileinfo, tokenizer, pdo_mysql
        tools: composer

    - name: Install dependencies
      run: |
        cd backend
        composer install --no-dev --optimize-autoloader
        php artisan config:clear

    - name: Prepare .env for production
      run: |
        cd backend
        echo "APP_ENV=production" > .env
        echo "APP_DEBUG=false" >> .env
        echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
        echo "DB_HOST=${{ secrets.FREEHOSTIA_DB_HOST }}" >> .env
        echo "DB_DATABASE=${{ secrets.FREEHOSTIA_DB_NAME }}" >> .env
        echo "DB_USERNAME=${{ secrets.FREEHOSTIA_DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.FREEHOSTIA_DB_PASSWORD }}" >> .env

    - name: Generate SQL migration file
      run: |
        cd backend
        php artisan schema:dump --prune
        echo "::warning::Remember to import schema.sql via Freehostia's phpMyAdmin"

    - name: Warning about manual steps
      run: |
        echo "::warning::After deployment:"
        echo "1. Create storage subfolders in Freehostia File Manager"
        echo "2. Import schema.sql via phpMyAdmin"

    - name: Upload via FTP
      uses: SamKirkland/FTP-Deploy-Action@4.3.0
      with:
        server: ${{ secrets.FREEHOSTIA_FTP_SERVER }}
        username: ${{ secrets.FREEHOSTIA_FTP_USER }}
        password: ${{ secrets.FREEHOSTIA_FTP_PASSWORD }}
        local-dir: ./backend/
        server-dir: ./gym-management.com/
        exclude: |
          .git*
          .env.example
          docker-compose.yml
          tests/
          storage/logs/*
          storage/framework/*
          .github/
          .editorconfig
