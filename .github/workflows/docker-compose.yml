name: Docker Compose Build, Test, Push and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Nécessaire pour git diff HEAD^ HEAD

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Start Docker Compose
      run: docker compose up -d --build

    - name: Wait for services to be ready
      run: |
        docker compose exec -T db mysqladmin ping -h localhost -u root -psecret --wait
        sleep 10 # Additional wait time for all services

    - name: Run Laravel migrations
      run: docker compose exec -T backend php artisan migrate --force

    - name: Verify services
      id: verify-services
      run: |
        # Verify backend is running
        docker compose ps | grep backend | grep Up || echo "Backend service check failed"
        # Verify frontend is running
        docker compose ps | grep frontend | grep Up || echo "Frontend service check failed"
        # Verify database is running
        docker compose ps | grep db | grep Up || echo "Database service check failed"
        echo "services_ready=true" >> $GITHUB_OUTPUT

    - name: Check for Dockerfile changes
      id: dockerfile-changes
      run: |
        changed_files=$(git diff --name-only HEAD^ HEAD || echo "")
        backend_changed=false
        frontend_changed=false
        
        if [[ "$changed_files" =~ "backend/Dockerfile" ]]; then
          echo "Backend Dockerfile changed"
          backend_changed=true
        fi
        
        if [[ "$changed_files" =~ "frontend/Dockerfile" ]]; then
          echo "Frontend Dockerfile changed"
          frontend_changed=true
        fi
        
        echo "backend_changed=$backend_changed" >> $GITHUB_OUTPUT
        echo "frontend_changed=$frontend_changed" >> $GITHUB_OUTPUT
        echo "No Dockerfile changes detected" >> $GITHUB_STEP_SUMMARY

    - name: Push Backend Image
      if: |
        github.event_name == 'push' &&
        steps.verify-services.outputs.services_ready == 'true' &&
        steps.dockerfile-changes.outputs.backend_changed == 'true'
      run: |
        docker tag $(docker compose images -q backend) ${{ secrets.DOCKER_HUB_USERNAME }}/gym-backend:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gym-backend:latest
      continue-on-error: true

    - name: Push Frontend Image
      if: |
        github.event_name == 'push' &&
        steps.verify-services.outputs.services_ready == 'true' &&
        steps.dockerfile-changes.outputs.frontend_changed == 'true'
      run: |
        docker tag $(docker compose images -q frontend) ${{ secrets.DOCKER_HUB_USERNAME }}/gym-frontend:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gym-frontend:latest
      continue-on-error: true

     - name: Prepare backend files for InfinityFree
      if: github.event_name == 'push'
      run: |
        mkdir -p deploy-htdocs
        # Copier uniquement les fichiers nécessaires (exclure vendor/, public/, .env)
        rsync -av --progress backend/ deploy-htdocs/ \
          --exclude=vendor/ \
          --exclude=public/ \
          --exclude=.env \
          --exclude=storage/logs/ \
          --exclude=.gitignore
        
        # Créer une archive
        tar -czvf htdocs-deploy.tar.gz -C deploy-htdocs .

    - name: Deploy to InfinityFree (htdocs root)
      if: github.event_name == 'push'
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.INFINITYFREE_HOST }}
        username: ${{ secrets.INFINITYFREE_USERNAME }}
        password: ${{ secrets.INFINITYFREE_PASSWORD }}
        port: ${{ secrets.INFINITYFREE_PORT || 22 }}
        source: "htdocs-deploy.tar.gz"
        target: "/home/${{ secrets.INFINITYFREE_USERNAME }}/htdocs/"

    - name: Extract files on server (via SSH)
      if: github.event_name == 'push'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.INFINITYFREE_HOST }}
        username: ${{ secrets.INFINITYFREE_USERNAME }}
        password: ${{ secrets.INFINITYFREE_PASSWORD }}
        port: ${{ secrets.INFINITYFREE_PORT || 22 }}
        script: |
          cd ~/htdocs
          tar -xzvf htdocs-deploy.tar.gz --strip-components=1
          rm htdocs-deploy.tar.gz
          # Si nécessaire, recréer le dossier storage/logs
          mkdir -p storage/logs
          chmod -R 755 storage
          echo "Déploiement terminé !"

    - name: Clean up
      if: always()
      run: |
        docker compose down -v
        rm -rf deploy-htdocs htdocs-deploy.tar.gz
