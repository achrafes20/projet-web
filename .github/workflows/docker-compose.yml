name: Docker Compose Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: gym_management
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost -u root -psecret" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Start Docker Compose
      run: docker compose up -d --build

    - name: Wait for services to be ready
      run: |
        docker compose exec -T db mysqladmin ping -h localhost -u root -psecret --wait
        sleep 10 # Additional wait time for all services

    - name: Install Composer dependencies
      run: docker compose exec -T app composer install

    - name: Generate Laravel application key
      run: docker compose exec -T app php artisan key:generate

    - name: Set storage permissions
      run: |
        docker compose exec -T app chmod -R 775 storage
        docker compose exec -T app chown -R www-data:www-data storage

    - name: Run Laravel migrations
      run: docker compose exec -T app php artisan migrate --force

    - name: Run PHPUnit tests
      run: docker compose exec -T app vendor/bin/phpunit

    - name: Verify services
      run: |
        # Verify backend is running
        docker compose ps | grep app | grep Up
        # Verify webserver is running
        docker compose ps | grep webserver | grep Up
        # Verify database is running
        docker compose ps | grep db | grep Up
        # Verify PHPMyAdmin is running
        docker compose ps | grep phpmyadmin | grep Up

    - name: Check application health
      run: |
        curl -sSf http://localhost:8080 > /dev/null || (echo "Backend health check failed" && exit 1)
        curl -sSf http://localhost:8081 > /dev/null || (echo "PHPMyAdmin health check failed" && exit 1)

    - name: Clean up
      if: always()
      run: docker compose down -v
